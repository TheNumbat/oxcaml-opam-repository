--- a/compiler/lib/generate.ml
+++ b/compiler/lib/generate.ml
@@ -1101,8 +1101,6 @@
   register_tern_prim "caml_array_unsafe_set" (fun cx cy cz _ ->
       J.EBin (J.Eq, Mlvalue.Array.field cx cy, cz));
   register_un_prim "caml_alloc_dummy" `Pure (fun _ _ -> J.array []);
-  register_un_prim "caml_obj_dup" ~need_loc:true `Mutable (fun cx loc ->
-      J.call (J.dot cx (Utf8_string.of_string_exn "slice")) [] loc);
   register_un_prim "caml_int_of_float" `Pure (fun cx _loc -> to_int cx);
   register_un_math_prim "caml_abs_float" "abs";
   register_un_math_prim "caml_acos_float" "acos";
--- a/runtime/js/obj.js
+++ b/runtime/js/obj.js
@@ -77,11 +77,49 @@
 }

 //Provides: caml_obj_dup mutable (mutable)
+//Requires: MlInt64, MlBytes, caml_failwith
 function caml_obj_dup(x) {
-  var l = x.length;
-  var a = new Array(l);
-  for (var i = 0; i < l; i++) a[i] = x[i];
-  return a;
+  switch (typeof x) {
+    case 'number':
+    case 'bigint':
+    case 'boolean':
+    case 'undefined':
+    case 'function':
+    case 'string': return x;
+    case 'object': {
+      if (x === null || x instanceof MlInt64) {
+        return x;
+      }
+
+      if (x instanceof MlBytes) {
+        if (typeof x.c === 'string') {
+          // we can re-use the content because strings are immutable
+          return new MlBytes(x.t, x.c, x.l);
+        } else {
+          // it must be an array, as defined in ./mlBytes.js
+          var content = Array.prototype.slice.call(x.c);
+          return new MlBytes(x.t, content, x.l);
+        }
+      }
+
+      if (x instanceof Array) {
+        return Array.prototype.slice.call(x);
+      }
+
+      // if we get here, then we want to fallback to the default
+      // case, which will end with the error handling.
+    }
+    default: break
+  }
+
+  try {
+    // printing the value as a string and json-stringifying can both fail,
+    // so wrap it in a try/catch with a less useful error message
+    var as_json = globalThis.JSON.stringify(x);
+    caml_failwith("caml_obj_dup called on unknown value: " + x + " " + as_json)
+  } catch (_) {
+    caml_failwith("caml_obj_dup called on unknown value");
+  }
 }

 //Provides: caml_obj_truncate (mutable, const)
