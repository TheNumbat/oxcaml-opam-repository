diff --git a/ppx-lib/gen_js_api_ppx.ml b/ppx-lib/gen_js_api_ppx.ml
--- a/ppx-lib/gen_js_api_ppx.ml
+++ b/ppx-lib/gen_js_api_ppx.ml
@@ -820,14 +820,14 @@ let fun_ ?(eta = true) (label, s, typ) e
   | Pexp_apply (f, [Nolabel, {pexp_desc = Pexp_ident {txt = Lident x; loc = _}; _}])
     when x = s && eta -> f
   | _ ->
-      Exp.fun_ label None (Pat.constraint_ (Pat.var (mknoloc s)) typ) e
+      Ast_builder.Default.pexp_fun ~loc:!Ast_helper.default_loc label None (Pat.constraint_ (Pat.var (mknoloc s)) typ) e

 let fun_unit e =
   match e.pexp_desc with
   | Pexp_apply (f, [Nolabel, {pexp_desc = Pexp_construct ({txt = Lident "()"; loc = _}, None); _}]) ->
       f
   | _ ->
-      Exp.fun_ Nolabel None (Pat.construct (mknoloc (Lident "()")) None) e
+      Ast_builder.Default.pexp_fun ~loc:!Ast_helper.default_loc Nolabel None (Pat.construct (mknoloc (Lident "()")) None) e

 let func args unit_arg body =
   let body = if unit_arg then fun_unit body else body in
@@ -928,7 +928,7 @@ let def ?packages s ty body =
               (Pat.unpack (mknoloc (Some module_name)))
               (package true)
           in
-          Exp.fun_ Nolabel None arg body
+          Ast_builder.Default.pexp_fun ~loc:!Ast_helper.default_loc Nolabel None arg body
         in
         ty, body
       in
@@ -1301,7 +1301,7 @@ and ml2js ty exp =
       in
       let formal_args, concrete_args = List.map fst args, List.map snd args in
       let res = ml2js_unit ty_res (app exp concrete_args unit_arg) in
-      let body = if formal_args = [] then Exp.fun_ Nolabel None (Pat.any ()) res else res in
+      let body = if formal_args = [] then Ast_builder.Default.pexp_fun ~loc:!Ast_helper.default_loc Nolabel None (Pat.any ()) res else res in
       let f = List.fold_right (fun (s, _) -> fun_ (Nolabel, s, ojs_typ)) formal_args body in
       ojs "fun_to_js" [int (max 1 (List.length formal_args)); f]
   | Arrow {ty_args; ty_vararg = Some {lab=label_variadic; att=_; typ=ty_variadic};
@@ -1691,8 +1691,10 @@ and gen_funs ~global_attrs p =
             | Pcstr_tuple args ->
                 begin match args with
                 | [] -> Constant
-                | [x] -> Unary (parse_typ full_ctx ~global_attrs x)
-                | _ :: _ :: _ -> Nary (List.map (parse_typ full_ctx ~global_attrs) args)
+                | [x] -> Unary (parse_typ full_ctx ~global_attrs (Ppxlib_jane.Shim.Pcstr_tuple_arg.to_core_type x))
+                | _ :: _ :: _ -> Nary (List.map (fun arg -> arg |>
+                                                            Ppxlib_jane.Shim.Pcstr_tuple_arg.to_core_type |>
+                                                            parse_typ full_ctx ~global_attrs) args)
                 end
             | Pcstr_record args ->
                 let global_attrs = c.pcd_attributes @ global_attrs in
@@ -1739,7 +1741,7 @@ and gen_funs ~global_attrs p =
                 (fun label acc ->
                    let name = (local_type_of_type_var label)^suffix in
                    let label = Name (local_type_of_type_var label, []) in
-                   Exp.fun_ Nolabel None (Pat.constraint_ (Pat.var (mknoloc name)) (gen_typ (typ label))) acc
+                   Ast_builder.Default.pexp_fun ~loc:!Ast_helper.default_loc Nolabel None (Pat.constraint_ (Pat.var (mknoloc name)) (gen_typ (typ label))) acc
                 ) ctx body
              ))
   in
@@ -1881,14 +1883,14 @@ and gen_class_cast = function
       let to_js =
         let arg = fresh() in
         Vb.mk (Pat.var (mknoloc (class_name ^ "_to_js")))
-          (Exp.fun_ Nolabel None
+          (Ast_builder.Default.pexp_fun ~loc:!Ast_helper.default_loc Nolabel None
              (Pat.constraint_ (Pat.var (mknoloc arg)) class_typ)
              (Exp.constraint_ (Exp.send (var arg) (mknoloc "to_js")) ojs_typ))
       in
       let of_js =
         let arg = fresh() in
         Vb.mk (Pat.var (mknoloc (class_name ^ "_of_js")))
-          (Exp.fun_ Nolabel None
+          (Ast_builder.Default.pexp_fun ~loc:!Ast_helper.default_loc Nolabel None
              (Pat.constraint_ (Pat.var (mknoloc arg)) ojs_typ)
              (Exp.constraint_ (Exp.apply (Exp.new_ (mknoloc (Longident.Lident class_name))) [Nolabel, var arg]) class_typ))
       in
