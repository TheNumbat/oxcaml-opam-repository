diff --git a/compiler/lib/ocaml_compiler.ml b/compiler/lib/ocaml_compiler.ml
--- a/compiler/lib/ocaml_compiler.ml
+++ b/compiler/lib/ocaml_compiler.ml
@@ -20,7 +20,6 @@ open! Stdlib

 let rec constant_of_const ~target c : Code.constant =
   let open Lambda in
-  let open Asttypes in
   match c with
   | Const_base (Const_int i) ->
       Int
@@ -31,13 +30,13 @@ let rec constant_of_const ~target c : Co
   | Const_base (Const_char c) -> Int (Regular, Int32.of_int (Char.code c))
   | ((Const_base (Const_string (s, _))) [@if ocaml_version < (4, 11, 0)])
   | ((Const_base (Const_string (s, _, _))) [@if ocaml_version >= (4, 11, 0)]) -> String s
-  | Const_base (Const_float s) -> Float (float_of_string s)
-  | Const_base (Const_int32 i) -> Int (Int32, i)
-  | Const_base (Const_int64 i) -> Int64 i
-  | Const_base (Const_nativeint i) ->
+  | Const_base (Const_float32 s | Const_unboxed_float32 s | Const_float s | Const_unboxed_float s) -> Float (float_of_string s)
+  | Const_base (Const_int32 i | Const_unboxed_int32 i) -> Int (Int32, i)
+  | Const_base (Const_int64 i | Const_unboxed_int64 i) -> Int64 i
+  | Const_base (Const_nativeint i | Const_unboxed_nativeint i) ->
       Int (Native, Int32.of_nativeint_warning_on_overflow i)
   | Const_immstring s -> String s
-  | Const_float_array sl ->
+  | Const_float_array sl | Const_float_block sl ->
       let l = List.map ~f:(fun f -> float_of_string f) sl in
       Float_array (Array.of_list l)
   | ((Const_pointer i) [@if ocaml_version < (4, 12, 0)]) ->
