diff --git a/lib/tests/test_fun_call.ml b/lib/tests/test_fun_call.ml
This patch should disappear once wasm_of_ocaml and js_of_ocaml merge back together.
Right now the wasm_of_ocaml tests are only running wasm which has distinct differences
from JavaScript. This patch ensures that tests pass on the JS side and then
wasm_inline_tests.output shows where wasm tests are different.
--- a/lib/tests/test_fun_call.ml
+++ b/lib/tests/test_fun_call.ml
@@ -145,8 +145,7 @@ let%expect_test "wrap_callback_strict" =
   call_and_log
     (Js.Unsafe.callback_with_arity 2 cb3)
     {| (function(f){ return f(1,2,3) }) |};
-  [%expect {|
-    Result: other |}];
+  [%expect {| Result: function#1#1 |}];
   call_and_log
     (Js.Unsafe.callback_with_arity 2 cb3)
     ~cont:(fun g -> g 4)
@@ -162,8 +161,7 @@ let%expect_test "wrap_callback_strict" =
     got 1, 2, 3, done
     Result: 0 |}];
   call_and_log (Js.Unsafe.callback_with_arity 2 cb3) {| (function(f){ return f(1,2) }) |};
-  [%expect {|
-    Result: other |}]
+  [%expect {| Result: function#1#1 |}]

 let%expect_test "wrap_callback_strict" =
   call_and_log
@@ -289,8 +287,7 @@ let%expect_test "wrap_meth_callback_stri
   call_and_log
     (Js.Unsafe.meth_callback_with_arity 2 cb4)
     {| (function(f){ return f.apply("this",[1,2,3]) }) |};
-  [%expect {|
-    Result: other |}];
+  [%expect {| Result: function#1#1 |}];
   call_and_log
     (Js.Unsafe.meth_callback_with_arity 2 cb4)
     ~cont:(fun g -> g 4)
@@ -308,7 +305,7 @@ let%expect_test "wrap_meth_callback_stri
   call_and_log
     (Js.Unsafe.meth_callback_with_arity 2 cb4)
     {| (function(f){ return f.apply("this",[1,2]) }) |};
-  [%expect {| Result: other |}]
+  [%expect {| Result: function#1#1 |}]

 let%expect_test "wrap_meth_callback_strict" =
   call_and_log
@@ -352,8 +349,7 @@ let%expect_test "partial application, ex

 let%expect_test _ =
   call_and_log cb3 ~cont:(fun g -> g 1) {| (function(f){ return f }) |};
-  [%expect {|
-    Result: other |}]
+  [%expect {| Result: function#2#2 |}]

 (*
 let%expect_test _ =
@@ -370,7 +366,7 @@ let%expect_test _ =
     | _ -> Printf.printf "Error: unknown"
   in
   f cb5;
-  [%expect {| Result: other |}];
+  [%expect {| Result: function#1#1 |}];
   f cb4;
   [%expect {|
     got 1, 1, 2, 3, done
@@ -403,11 +399,9 @@ let%expect_test _ =
     got 1, 2, 3, done
     Result: 0 |}];
   f (Sys.opaque_identity (Obj.magic cb4));
-  [%expect {|
-    Result: other |}];
+  [%expect {| Result: function#1#1 |}];
   f (Sys.opaque_identity (Obj.magic cb5));
-  [%expect {|
-    Result: other |}]
+  [%expect {| Result: function#2#2 |}]

 let%expect_test _ =
   let open Js_of_ocaml in
diff --git a/lib/tests/test_poly_compare.ml b/lib/tests/test_poly_compare.ml
--- a/lib/tests/test_poly_compare.ml
+++ b/lib/tests/test_poly_compare.ml
@@ -25,7 +25,6 @@ let%expect_test "poly equal" =
   assert (List.mem obj1 [ obj2; obj1 ]);
   assert (not (List.mem obj1 [ obj2 ]));
   ()
-[@@expect.uncaught_exn {| (Invalid_argument "compare: abstract value") |}]

 let%expect_test "poly equal neg" =
   let obj1 = Js.Unsafe.obj [||] in
@@ -50,8 +49,7 @@ let%expect_test "poly compare" =
       then print_endline "preserve"
       else print_endline "not preserve"
   | _ -> assert false);
-  [%expect.unreachable]
-[@@expect.uncaught_exn {| (Invalid_argument "compare: abstract value") |}]
+  [%expect {| not preserve |}]

 type pack = Pack : 'a -> pack

@@ -65,7 +63,6 @@ let%expect_test "number comparison" =
   assert (
     Pack (Js.Unsafe.js_expr "new Number(2.1)")
     = Pack (Js.Unsafe.js_expr "new Number(2.1)"))
-[@@expect.uncaught_exn {| "Assert_failure lib/tests/test_poly_compare.ml:59:2" |}]

 let js_string_enabled = Js.typeof (Obj.magic "") == Js.string "string"

@@ -82,7 +79,6 @@ let%expect_test "string comparison" =
   assert (
     Pack (Js.Unsafe.js_expr "new String('abcd')")
     = Pack (Js.Unsafe.js_expr "new String('abcd')"))
-[@@expect.uncaught_exn {| "Assert_failure lib/tests/test_poly_compare.ml:82:2" |}]

 let%expect_test "symbol comparison" =
   let s1 = Pack (Js.Unsafe.js_expr "Symbol('2')") in
@@ -92,7 +88,6 @@ let%expect_test "symbol comparison" =
   assert (compare s1 s1 = 0);
   assert (compare s1 s2 = 1);
   assert (compare s2 s1 = 1)
-[@@expect.uncaught_exn {| (Invalid_argument "compare: abstract value") |}]

 let%expect_test "object comparison" =
   let s1 = Pack (Js.Unsafe.js_expr "{}") in
@@ -102,7 +97,6 @@ let%expect_test "object comparison" =
   assert (compare s1 s1 = 0);
   assert (compare s1 s2 = 1);
   assert (compare s2 s1 = 1)
-[@@expect.uncaught_exn {| (Invalid_argument "compare: abstract value") |}]

 let%expect_test "poly compare" =
   let l =
@@ -120,13 +114,39 @@ let%expect_test "poly compare" =
   let l' = List.sort (fun (_, a) (_, b) -> compare a b) l in
   List.iter (fun (i, _) -> Printf.printf "%d\n" i) l';
   print_endline "";
-  [%expect.unreachable];
+  [%expect {|
+    1
+    3
+    2
+    0
+    6
+    7
+    5
+    4
+    |}];
   let l' = List.sort (fun (_, a) (_, b) -> compare a b) (List.rev l) in
   let l'' = List.sort (fun (_, a) (_, b) -> compare a b) (List.rev l') in
   List.iter (fun (i, _) -> Printf.printf "%d\n" i) l';
   print_endline "";
-  [%expect.unreachable];
+  [%expect {|
+    3
+    1
+    2
+    0
+    4
+    5
+    7
+    6
+    |}];
   List.iter (fun (i, _) -> Printf.printf "%d\n" i) l'';
   print_endline "";
-  [%expect.unreachable]
-[@@expect.uncaught_exn {| (Invalid_argument "compare: abstract value") |}]
+  [%expect {|
+    1
+    3
+    2
+    0
+    4
+    5
+    6
+    7
+    |}]
